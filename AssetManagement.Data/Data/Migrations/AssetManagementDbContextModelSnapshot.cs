// <auto-generated />
using System;
using AssetManagement.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetManagement.Data.Data.Migrations
{
    [DbContext(typeof(AssetManagementDbContext))]
    partial class AssetManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssetManagement.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChanged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StaffCode")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InstalledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssignedById");

                    b.HasIndex("AssignedToId");

                    b.ToTable("Assignment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0c2a1d1-7546-482c-badb-f040a57b4d73"),
                            AssetId = new Guid("797d40d3-217a-4ad9-962b-076a98ebcacb"),
                            AssignedById = new Guid("2c484448-b14e-46f3-957e-a8719f14bbd6"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6605),
                            AssignedToId = new Guid("2c484448-b14e-46f3-957e-a8719f14bbd6"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6606),
                            Note = "Assignment 1",
                            State = 1
                        },
                        new
                        {
                            Id = new Guid("ecab1077-b5af-47ac-ba78-3fb4faf776df"),
                            AssetId = new Guid("81436c8d-4090-4abf-a926-14d061f1f9c9"),
                            AssignedById = new Guid("2c484448-b14e-46f3-957e-a8719f14bbd6"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6621),
                            AssignedToId = new Guid("afa27f12-ee0b-4a82-b30b-507a680cb9cf"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6622),
                            Note = "Assignment 2",
                            State = 2
                        },
                        new
                        {
                            Id = new Guid("3ae20275-bd40-4af2-bfe1-db02e08471c5"),
                            AssetId = new Guid("48e50b2e-2b0a-44cb-a054-1dc044ef0677"),
                            AssignedById = new Guid("2c484448-b14e-46f3-957e-a8719f14bbd6"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6636),
                            AssignedToId = new Guid("afa27f12-ee0b-4a82-b30b-507a680cb9cf"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6638),
                            Note = "Assignment 3",
                            State = 1
                        },
                        new
                        {
                            Id = new Guid("0f9e3ef3-67b5-48e8-b9d7-8535c1db7d8d"),
                            AssetId = new Guid("9a7e2a23-23b6-4172-946a-28470034253b"),
                            AssignedById = new Guid("2c484448-b14e-46f3-957e-a8719f14bbd6"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6649),
                            AssignedToId = new Guid("151e3a0f-5cd2-48ad-ae50-783614f5d4ff"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6649),
                            Note = "Assignment 4",
                            State = 2
                        },
                        new
                        {
                            Id = new Guid("d0179695-8086-426d-a113-8925443c49e7"),
                            AssetId = new Guid("503c3eb7-3a05-4123-8c69-3011bee3d553"),
                            AssignedById = new Guid("2c484448-b14e-46f3-957e-a8719f14bbd6"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6681),
                            AssignedToId = new Guid("2450bc08-8b39-41cf-90e9-7b10510c557e"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6682),
                            Note = "Assignment 5",
                            State = 1
                        },
                        new
                        {
                            Id = new Guid("91d025ed-9693-426c-ab5f-1b5910ade37d"),
                            AssetId = new Guid("f673f337-c449-4ff1-97cd-366b79cf3a63"),
                            AssignedById = new Guid("4c196276-54f0-48ae-acc9-abeb0cb598f5"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6695),
                            AssignedToId = new Guid("06f00eb0-b413-4096-ac54-8a501d96d3da"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6696),
                            Note = "Assignment 6",
                            State = 3
                        },
                        new
                        {
                            Id = new Guid("7fe9bfb3-3d5d-4650-8304-0049be838783"),
                            AssetId = new Guid("a91d8139-49ff-43f2-a9c1-379142b3c056"),
                            AssignedById = new Guid("4c196276-54f0-48ae-acc9-abeb0cb598f5"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6726),
                            AssignedToId = new Guid("256a9cef-7479-4563-a104-8b310e16ffe0"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6727),
                            Note = "Assignment 7",
                            State = 1
                        },
                        new
                        {
                            Id = new Guid("459f77d8-3be7-40b0-8dd5-c4901374bfbd"),
                            AssetId = new Guid("07ed57d0-9745-43e0-a40e-39a29c957c1b"),
                            AssignedById = new Guid("4c196276-54f0-48ae-acc9-abeb0cb598f5"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6742),
                            AssignedToId = new Guid("ede0c1cd-5d7e-422c-a787-8f473c45123b"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6742),
                            Note = "Assignment 8",
                            State = 2
                        },
                        new
                        {
                            Id = new Guid("70d2ffe9-5293-49ac-9aed-c451ef4e887a"),
                            AssetId = new Guid("48e50b2e-2b0a-44cb-a054-1dc044ef0677"),
                            AssignedById = new Guid("4c196276-54f0-48ae-acc9-abeb0cb598f5"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6754),
                            AssignedToId = new Guid("49c2b516-b12e-4dd8-ae2b-9027446f4b77"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6755),
                            Note = "Assignment 9",
                            State = 3
                        },
                        new
                        {
                            Id = new Guid("7859aebb-9212-41b2-91b5-75e1c1271683"),
                            AssetId = new Guid("9a7e2a23-23b6-4172-946a-28470034253b"),
                            AssignedById = new Guid("4c196276-54f0-48ae-acc9-abeb0cb598f5"),
                            AssignedDate = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6791),
                            AssignedToId = new Guid("48bc2207-ec50-455d-99e4-990995f809e0"),
                            LastUpdated = new DateTime(2024, 7, 2, 10, 34, 7, 856, DateTimeKind.Utc).AddTicks(6792),
                            Note = "Assignment 10",
                            State = 3
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bbf66a4-da08-4b87-bdb2-1502e38562f3"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("5fc71af5-0216-402b-a5cb-ba17701e2fa3"),
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.Asset", b =>
                {
                    b.HasOne("AssetManagement.Domain.Entities.Category", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("AssetManagement.Domain.Entities.Asset", "Asset")
                        .WithMany("Assignments")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Domain.Entities.AppUser", "AssignedByUser")
                        .WithMany("AssignedByAssignments")
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AssetManagement.Domain.Entities.AppUser", "AssignedToUser")
                        .WithMany("AssignedToAssignments")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AssetManagement.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Domain.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AssignedByAssignments");

                    b.Navigation("AssignedToAssignments");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.Asset", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.Category", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("AssetManagement.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
